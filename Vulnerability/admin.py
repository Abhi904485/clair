from django.contrib import admin
from django_admin_search.admin import AdvancedSearchAdmin
from rangefilter.filters import DateTimeRangeFilter
from clair.export import ExportCsvMixin, ExportPdfMixin
from clair.utility import is_null, generate_query_for_date, get_link
from .forms import VulnerabilityForm
from .models import Vulnerability


@admin.register(Vulnerability)
class VulnerabilityAdmin(AdvancedSearchAdmin, ExportCsvMixin, ExportPdfMixin):

    def namespace_link(self):
        tables = ['namespace', ]
        return get_link(self, 'name', tables)

    def search_vulnerability_created_at(self, field, field_value, form_field, request, advanced_search_fields):
        field_value = self.get_field_value(field)[1].strip() if self.get_field_value(field)[1] else self.get_field_value(field)[1]
        return generate_query_for_date(field, field_value, form_field, request, advanced_search_fields)

    def search_vulnerability_created_before(self, field, field_value, form_field, request, advanced_search_fields):
        field_value = self.get_field_value(field)[1].strip() if self.get_field_value(field)[1] else self.get_field_value(field)[1]
        return generate_query_for_date(field, field_value, form_field, request, advanced_search_fields)

    def search_vulnerability_created_after(self, field, field_value, form_field, request, advanced_search_fields):
        field_value = self.get_field_value(field)[1].strip() if self.get_field_value(field)[1] else self.get_field_value(field)[1]
        return generate_query_for_date(field, field_value, form_field, request, advanced_search_fields)

    def search_vulnerability_deleted_at(self, field, field_value, form_field, request, advanced_search_fields):
        field_value = self.get_field_value(field)[1].strip() if self.get_field_value(field)[1] else self.get_field_value(field)[1]
        return generate_query_for_date(field, field_value, form_field, request, advanced_search_fields)

    def search_vulnerability_deleted_before(self, field, field_value, form_field, request, advanced_search_fields):
        field_value = self.get_field_value(field)[1].strip() if self.get_field_value(field)[1] else self.get_field_value(field)[1]
        return generate_query_for_date(field, field_value, form_field, request, advanced_search_fields)

    def search_vulnerability_deleted_after(self, field, field_value, form_field, request, advanced_search_fields):
        field_value = self.get_field_value(field)[1].strip() if self.get_field_value(field)[1] else self.get_field_value(field)[1]
        return generate_query_for_date(field, field_value, form_field, request, advanced_search_fields)

    def search_vulnerability_deleted_is_null(self, field, field_value, form_field, request, advanced_search_fields):
        field_value = self.get_field_value(field)[1].strip() if self.get_field_value(field)[1] else self.get_field_value(field)[1]
        return is_null(field, field_value, form_field, request, advanced_search_fields)

    namespace_link.short_description = "Namespace"
    namespace_link.admin_order_field = "namespace"
    list_display = ("id", 'name', namespace_link, 'severity', 'severity_source', 'created_at', 'deleted_at')
    raw_id_fields = ('namespace',)
    search_fields = ("id", 'name', 'namespace__name', 'severity', 'severity_source')
    ordering = ("id", 'name', 'severity', 'severity_source', 'created_at', 'deleted_at')
    list_per_page = 10
    list_display_links = ("id", 'name', 'created_at', 'deleted_at', namespace_link, 'severity', 'severity_source')
    list_filter = (('created_at', DateTimeRangeFilter), ('deleted_at', DateTimeRangeFilter), 'severity', 'severity_source', 'namespace')
    actions = ["export_as_csv", "export_as_pdf"]
    search_form = VulnerabilityForm
