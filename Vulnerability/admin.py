from datetime import datetime

import pytz
from django.contrib import admin, messages
from django.db.models import Q
from django.utils.html import format_html
from django_admin_search.admin import AdvancedSearchAdmin

from clair.export import ExportCsvMixin, ExportPdfMixin
from .forms import VulnerabilityForm
from .models import Vulnerability


@admin.register(Vulnerability)
class VulnerabilityAdmin(AdvancedSearchAdmin, ExportCsvMixin, ExportPdfMixin):

    def namespace_link(self):
        return format_html(
            '<a href="/{app_name}/{db_table}/{db_table_primary_key}/change/">{db_table_field}</a>'.format(
                app_name=self.namespace._meta.app_label, db_table=self.namespace._meta.db_table,
                db_table_primary_key=self.namespace.id, db_table_field=self.namespace.name))

    @staticmethod
    def get_date_time(sd=None, st=None, ed=None, et=None):
        first_date_time = None
        second_date_time = None
        if sd and st:
            first_date_time = datetime.strptime(sd + st, "%Y-%m-%d%H:%M:%S").replace(tzinfo=pytz.UTC)
        if ed and et:
            second_date_time = datetime.strptime(ed + et, "%Y-%m-%d%H:%M:%S").replace(tzinfo=pytz.UTC)
        return first_date_time, second_date_time

    @staticmethod
    def split_field_value(field_value):
        if field_value:
            return field_value.split(" "), len(field_value.split(" "))
        return None

    @staticmethod
    def get_field_name_and_field_filter(form_field, field):
        return form_field.widget.attrs.get('filter_field', field) + form_field.widget.attrs.get('filter_method', '')

    def before_exact_after(self, field, field_value, form_field, request, advanced_search_fields):
        if self.get_field_value(field)[0]:
            if self.split_field_value(field_value):
                ((sd, st), length) = self.split_field_value(field_value)
                if length == 2:
                    start_date_time, _ = self.get_date_time(sd, st)
                    return Q(**{self.get_field_name_and_field_filter(form_field, field): start_date_time})
                else:
                    messages.add_message(request, messages.ERROR,
                                         'Date time should be in yyyy-mm-dd HH:MM:SS Hours should be in 24 format')
                    return None
        else:
            return Q()

    def search_vulnerability_created_at(self, field, field_value, form_field, request, advanced_search_fields):
        return self.before_exact_after(field, field_value, form_field, request, advanced_search_fields)

    def search_vulnerability_created_before(self, field, field_value, form_field, request, advanced_search_fields):
        return self.before_exact_after(field, field_value, form_field, request, advanced_search_fields)

    def search_vulnerability_created_after(self, field, field_value, form_field, request, advanced_search_fields):
        return self.before_exact_after(field, field_value, form_field, request, advanced_search_fields)

    def search_vulnerability_deleted_at(self, field, field_value, form_field, request, advanced_search_fields):
        return self.before_exact_after(field, field_value, form_field, request, advanced_search_fields)

    def search_vulnerability_deleted_before(self, field, field_value, form_field, request, advanced_search_fields):
        return self.before_exact_after(field, field_value, form_field, request, advanced_search_fields)

    def search_vulnerability_deleted_after(self, field, field_value, form_field, request, advanced_search_fields):
        return self.before_exact_after(field, field_value, form_field, request, advanced_search_fields)


    def search_vulnerability_deleted_is_null(self, field, field_value, form_field, request, advanced_search_fields):
        if self.get_field_value(field)[0]:
            field_name = form_field.widget.attrs.get('filter_field', field)
            field_filter = field_name + form_field.widget.attrs.get('filter_method', '')
            if field_value.lower() == "true":
                field_value = True
                return Q(**{field_filter: bool(field_value)})
            elif field_value.lower() == "false":
                field_value = False
                return Q(**{field_filter: bool(field_value)})
            else:
                messages.add_message(request, messages.ERROR, "Input Should be True or false (Not Case Sensitive)")
                return None
        else:
            return Q()

    namespace_link.short_description = "Namespace"
    namespace_link.admin_order_field = "namespace"
    list_display = ("id", 'name', namespace_link, 'severity', 'severity_source')
    raw_id_fields = ('namespace',)
    search_fields = ("id", 'name', 'namespace__name', 'severity', 'severity_source')
    ordering = ("id", 'name', 'severity', 'severity_source')
    list_per_page = 10
    list_display_links = ("id", 'name', namespace_link, 'severity', 'severity_source')
    list_filter = ('severity', 'severity_source', 'namespace',)
    actions = ["export_as_csv", "export_as_pdf"]
    search_form = VulnerabilityForm
