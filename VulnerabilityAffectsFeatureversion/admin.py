from django.contrib import admin
from django_admin_search.admin import AdvancedSearchAdmin

from clair.export import ExportCsvMixin, ExportPdfMixin
from clair.utility import get_link, is_null
from .forms import VulnerabilityAffectsFeatureversionForm
from .models import VulnerabilityAffectsFeatureversion


# Register your models here.


@admin.register(VulnerabilityAffectsFeatureversion)
class VulnerabilityAffectsFeatureversionAdmin(AdvancedSearchAdmin, ExportCsvMixin, ExportPdfMixin):

    def vulnerability_link(self):
        tables = ['vulnerability']
        return get_link(self, 'name', tables)

    vulnerability_link.short_description = "Vulnerability Name"
    vulnerability_link.admin_order_field = "vulnerability"

    def feature_version_link(self):
        tables = ['featureversion']
        return get_link(self, 'version', tables)

    feature_version_link.short_description = "Feature Version"
    feature_version_link.admin_order_field = "featureversion"

    def fixedin_link(self):
        tables = ['fixedin']
        return get_link(self, 'version', tables)

    fixedin_link.short_description = "FixedIn Feature Version"
    fixedin_link.admin_order_field = "fixedin"

    def feature_link(self):
        tables = ['fixedin', 'feature']
        return get_link(self, 'name', tables)

    feature_link.short_description = "Feature Name"
    feature_link.admin_order_field = "fixedin__feature__name"

    def severity_source_link(self):
        tables = ['vulnerability', ]
        return get_link(self, 'severity_source', tables)

    severity_source_link.short_description = "Severity Source"
    severity_source_link.admin_order_field = "vulnerability__severity_source"

    def namespace_link(self):
        tables = ['vulnerability', 'namespace', ]
        return get_link(self, 'name', tables)

    namespace_link.short_description = "Namespace Name"
    namespace_link.admin_order_field = "vulnerability__namespace__name"

    def search_vulnerability_severity_source_is_null(self, field, field_value, form_field, request, advanced_search_fields):
        field_value = self.get_field_value(field)[1].strip() if self.get_field_value(field)[1] else self.get_field_value(field)[1]
        return is_null(field, field_value, form_field, request, advanced_search_fields)

    list_display = ("id", vulnerability_link, feature_version_link, fixedin_link, feature_link, severity_source_link, namespace_link)
    raw_id_fields = ('vulnerability', 'featureversion', 'fixedin')
    search_fields = ("id", 'vulnerability__name', 'featureversion__version', 'fixedin__version', 'fixedin__feature__name', 'vulnerability__severity_source', 'vulnerability__namespace__name')
    list_per_page = 20
    list_filter = ('vulnerability__severity_source', 'vulnerability__namespace__name')
    list_display_links = ("id", vulnerability_link, feature_version_link, fixedin_link, feature_link)
    actions = ["export_as_csv", "export_as_pdf"]
    search_form = VulnerabilityAffectsFeatureversionForm
