from datetime import datetime

import pytz
from django.contrib import admin, messages
from django.db.models import Q
from django.utils.html import format_html
from django_admin_search.admin import AdvancedSearchAdmin

from clair.export import ExportCsvMixin, ExportPdfMixin
from .forms import VulnerabilityNotificationForm
from .models import VulnerabilityNotification


# Register your models here.


@admin.register(VulnerabilityNotification)
class VulnerabilityNotificationAdmin(AdvancedSearchAdmin, ExportCsvMixin, ExportPdfMixin):

    def custom_titled_filter(title):
        class Wrapper(admin.FieldListFilter):
            def __new__(cls, *args, **kwargs):
                instance = admin.FieldListFilter.create(*args, **kwargs)
                instance.title = title
                return instance

        return Wrapper

    def old_vulnerability_link(self):
        if self.old_vulnerability is None:
            app_name = self._meta.app_label
            db_table = self._meta.db_table
            db_table_primary_key = self.id
            db_table_field = "-"
        else:
            app_name = self.old_vulnerability._meta.app_label
            db_table = self.old_vulnerability._meta.db_table
            db_table_primary_key = self.old_vulnerability.id
            db_table_field = self.old_vulnerability.name
        return format_html(
            '<a href="/{app_name}/{db_table}/{db_table_primary_key}/change/">{db_table_field}</a>'.format(
                app_name=app_name, db_table=db_table,
                db_table_primary_key=db_table_primary_key, db_table_field=db_table_field))

    old_vulnerability_link.short_description = "Old Vulnerability"
    old_vulnerability_link.admin_order_field = "old_vulnerability__name"

    def new_vulnerability_link(self):
        if self.new_vulnerability is None:
            app_name = self._meta.app_label
            db_table = self._meta.db_table
            db_table_primary_key = self.id
            db_table_field = "-"
        else:
            app_name = self.new_vulnerability._meta.app_label
            db_table = self.new_vulnerability._meta.db_table
            db_table_primary_key = self.new_vulnerability.id
            db_table_field = self.new_vulnerability.name
        return format_html(
            '<a href="/{app_name}/{db_table}/{db_table_primary_key}/change/">{db_table_field}</a>'.format(
                app_name=app_name, db_table=db_table,
                db_table_primary_key=db_table_primary_key, db_table_field=db_table_field))

    new_vulnerability_link.short_description = "New Vulnerability"
    new_vulnerability_link.admin_order_field = "new_vulnerability__name"

    def severity_source_old_vulnerability_link(self):
        return format_html(
            '<p>{db_table_field}</p>'.format(
                db_table_field=self.old_vulnerability.severity_source if self.old_vulnerability else None))

    severity_source_old_vulnerability_link.short_description = "Old Vulnerability Severity Source"
    severity_source_old_vulnerability_link.admin_order_field = "old_vulnerability__severity_source"

    def severity_source_new_vulnerability_link(self):
        return format_html(
            '<p>{db_table_field}</p>'.format(
                app_name=self.new_vulnerability._meta.app_label,
                db_table=self.new_vulnerability._meta.app_label.lower(),
                db_table_primary_key=self.new_vulnerability.id, db_table_field=self.new_vulnerability.severity_source))

    severity_source_new_vulnerability_link.short_description = "New Vulnerability Severity Source"
    severity_source_new_vulnerability_link.admin_order_field = "new_vulnerability__severity_source"

    def namespace_new_vulnerability_link(self):
        return format_html(
            '<a href="/{app_name}/{db_table}/{db_table_primary_key}/change/">{db_table_field}</a>'.format(
                app_name=self.new_vulnerability.namespace._meta.app_label,
                db_table=self.new_vulnerability.namespace._meta.app_label.lower(),
                db_table_primary_key=self.new_vulnerability.namespace.id,
                db_table_field=self.new_vulnerability.namespace.name))

    namespace_new_vulnerability_link.short_description = "New Vulnerability Namespace"
    namespace_new_vulnerability_link.admin_order_field = "new_vulnerability__namespace__name"

    def namespace_old_vulnerability_link(self):
        if self.old_vulnerability is None:
            app_name = self._meta.app_label
            db_table = self._meta.db_table
            db_table_primary_key = self.id
            db_table_field = "-"
        else:
            app_name = self.old_vulnerability.namespace._meta.app_label
            db_table = self.old_vulnerability.namespace._meta.db_table
            db_table_primary_key = self.old_vulnerability.namespace.id
            db_table_field = self.old_vulnerability.namespace.name
        return format_html(
            '<a href="/{app_name}/{db_table}/{db_table_primary_key}/change/">{db_table_field}</a>'.format(
                app_name=app_name, db_table=db_table,
                db_table_primary_key=db_table_primary_key, db_table_field=db_table_field))

    namespace_old_vulnerability_link.short_description = "Old Vulnerability Namespace"
    namespace_old_vulnerability_link.admin_order_field = "old_vulnerability__namespace__name"

    def get_is_null(self, field, field_value, form_field, request, advanced_search_fields):
        if self.get_field_value(field)[0]:
            field_name = form_field.widget.attrs.get('filter_field', field)
            field_filter = field_name + form_field.widget.attrs.get('filter_method', '')
            if field_value.lower() == "true":
                field_value = True
                return Q(**{field_filter: bool(field_value)})
            elif field_value.lower() == "false":
                field_value = False
                return Q(**{field_filter: bool(field_value)})
            else:
                messages.add_message(request, messages.ERROR, "Input Should be True or false (Not Case Sensitive)")
                return None
        else:
            return Q()

    def search_old_vulnerability_severity_source_is_null(self, field, field_value, form_field, request,
                                                         advanced_search_fields):
        return self.get_is_null(field, field_value, form_field, request, advanced_search_fields)

    def search_new_vulnerability_severity_source_is_null(self, field, field_value, form_field, request,
                                                         advanced_search_fields):
        return self.get_is_null(field, field_value, form_field, request, advanced_search_fields)

    @staticmethod
    def get_date_time(sd=None, st=None, ed=None, et=None):
        first_date_time = None
        second_date_time = None
        if sd and st:
            first_date_time = datetime.strptime(sd + st, "%Y-%m-%d%H:%M:%S").replace(tzinfo=pytz.UTC)
        if ed and et:
            second_date_time = datetime.strptime(ed + et, "%Y-%m-%d%H:%M:%S").replace(tzinfo=pytz.UTC)
        return first_date_time, second_date_time

    @staticmethod
    def split_field_value(field_value):
        if field_value:
            return field_value.split(" "), len(field_value.split(" "))
        return None

    @staticmethod
    def get_field_name_and_field_filter(form_field, field):
        return form_field.widget.attrs.get('filter_field', field) + form_field.widget.attrs.get('filter_method', '')

    def before_exact_after(self, field, field_value, form_field, request, advanced_search_fields):
        if self.get_field_value(field)[0]:
            if self.split_field_value(field_value):
                ((sd, st), length) = self.split_field_value(field_value)
                if length == 2:
                    start_date_time, _ = self.get_date_time(sd, st)
                    return Q(**{self.get_field_name_and_field_filter(form_field, field): start_date_time})
                else:
                    messages.add_message(request, messages.ERROR,
                                         'Date time should be in yyyy-mm-dd HH:MM:SS Hours should be in 24 format')
                    return None
        else:
            return Q()

    def search_created_at(self, field, field_value, form_field, request, advanced_search_fields):
        return self.before_exact_after(field, field_value, form_field, request, advanced_search_fields)

    def search_created_at_before(self, field, field_value, form_field, request, advanced_search_fields):
        return self.before_exact_after(field, field_value, form_field, request, advanced_search_fields)

    def search_created_at_after(self, field, field_value, form_field, request, advanced_search_fields):
        return self.before_exact_after(field, field_value, form_field, request, advanced_search_fields)

    def search_notified_at(self, field, field_value, form_field, request, advanced_search_fields):
        return self.before_exact_after(field, field_value, form_field, request, advanced_search_fields)

    def search_notified_at_before(self, field, field_value, form_field, request, advanced_search_fields):
        return self.before_exact_after(field, field_value, form_field, request, advanced_search_fields)

    def search_notified_at_after(self, field, field_value, form_field, request, advanced_search_fields):
        return self.before_exact_after(field, field_value, form_field, request, advanced_search_fields)

    def search_deleted_at(self, field, field_value, form_field, request, advanced_search_fields):
        return self.before_exact_after(field, field_value, form_field, request, advanced_search_fields)

    def search_deleted_at_before(self, field, field_value, form_field, request, advanced_search_fields):
        return self.before_exact_after(field, field_value, form_field, request, advanced_search_fields)

    def search_deleted_at_after(self, field, field_value, form_field, request, advanced_search_fields):
        return self.before_exact_after(field, field_value, form_field, request, advanced_search_fields)

    model = VulnerabilityNotification
    raw_id_fields = ('old_vulnerability', 'new_vulnerability')
    list_display = ("id", 'name', 'created_at', old_vulnerability_link, new_vulnerability_link,
                    severity_source_old_vulnerability_link, severity_source_new_vulnerability_link,
                    namespace_new_vulnerability_link, namespace_old_vulnerability_link)
    search_fields = ("id",
                     'name', 'created_at', 'notified_at', 'deleted_at', 'old_vulnerability__name',
                     'new_vulnerability__name',
                     'old_vulnerability__severity_source', 'new_vulnerability__severity_source',
                     'new_vulnerability__namespace__name', 'old_vulnerability__namespace__name')
    ordering = ("id", 'name', 'created_at', 'notified_at', 'deleted_at')
    list_per_page = 7
    list_display_links = ("id",
                          'name', 'created_at', old_vulnerability_link, new_vulnerability_link,
                          severity_source_old_vulnerability_link, severity_source_new_vulnerability_link,
                          namespace_new_vulnerability_link, namespace_old_vulnerability_link)
    list_filter = (
        ('old_vulnerability__severity_source', custom_titled_filter("Old Vulnerability Severity Source")),
        ('new_vulnerability__severity_source', custom_titled_filter("New Vulnerability Severity Source")),
        ('old_vulnerability__namespace__name', custom_titled_filter("Old Vulnerability Namespace")),
        ('new_vulnerability__namespace__name', custom_titled_filter("New Vulnerability Namespace")),)
    actions = ["export_as_csv", "export_as_pdf"]
    search_form = VulnerabilityNotificationForm
