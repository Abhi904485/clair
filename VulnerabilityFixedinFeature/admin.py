from django.contrib import admin, messages
from django.db.models import Q
from django.utils.html import format_html
from django_admin_search.admin import AdvancedSearchAdmin

from clair.export import ExportCsvMixin, ExportPdfMixin
from .forms import VulnerabilityFixedinFeatureForm
from .models import VulnerabilityFixedinFeature


# Register your models here.


@admin.register(VulnerabilityFixedinFeature)
class VulnerabilityFixedinFeatureAdmin(AdvancedSearchAdmin, ExportCsvMixin, ExportPdfMixin):

    def vulnerability_link(self):
        return format_html(
            '<a href="/{app_name}/{db_table}/{db_table_primary_key}/change/">{db_table_field}</a>'.format(
                app_name=self.vulnerability._meta.app_label, db_table=self.vulnerability._meta.db_table,
                db_table_primary_key=self.vulnerability.id, db_table_field=self.vulnerability.name))

    vulnerability_link.short_description = "Vulnerability Name"
    vulnerability_link.admin_order_field = "vulnerability__name"

    def feature_link(self):
        return format_html(
            '<a href="/{app_name}/{db_table}/{db_table_primary_key}/change/">{db_table_field}</a>'.format(
                app_name=self.feature._meta.app_label, db_table=self.feature._meta.app_label.lower(),
                db_table_primary_key=self.feature.id, db_table_field=self.feature.name))

    feature_link.short_description = "Feature Name"
    feature_link.admin_order_field = "feature__name"

    def severity_source_link(self):
        return format_html(
            '<p>{db_table_field}</p>'.format(
                app_name=self.vulnerability._meta.app_label, db_table=self.vulnerability._meta.app_label.lower(),
                db_table_primary_key=self.vulnerability.id, db_table_field=self.vulnerability.severity_source))

    severity_source_link.short_description = "Vulnerability Severity Source"
    severity_source_link.admin_order_field = "vulnerability__severity_source"

    def namespace_link(self):
        return format_html(
            '<a href="/{app_name}/{db_table}/{db_table_primary_key}/change/">{db_table_field}</a>'.format(
                app_name=self.vulnerability.namespace._meta.app_label,
                db_table=self.vulnerability.namespace._meta.app_label.lower(),
                db_table_primary_key=self.vulnerability.namespace.id, db_table_field=self.vulnerability.namespace.name))

    namespace_link.short_description = "Namespace Name"
    namespace_link.admin_order_field = "vulnerability__namespace__name"

    def search_vulnerability_severity_source_is_null(self, field, field_value, form_field, request,
                                                     advanced_search_fields):
        if self.get_field_value(field)[0]:
            field_name = form_field.widget.attrs.get('filter_field', field)
            field_filter = field_name + form_field.widget.attrs.get('filter_method', '')
            if field_value.lower() == "true":
                field_value = True
                return Q(**{field_filter: bool(field_value)})
            elif field_value.lower() == "false":
                field_value = False
                return Q(**{field_filter: bool(field_value)})
            else:
                messages.add_message(request, messages.ERROR, "Input Should be True or false (Not Case Sensitive)")
                return None
        else:
            return Q()

    model = VulnerabilityFixedinFeature
    raw_id_fields = ('vulnerability', 'feature')
    list_display = ("id", 'version', vulnerability_link, feature_link, severity_source_link, namespace_link)
    search_fields = ("id", 'version', 'vulnerability__name', 'feature__name', 'vulnerability__severity_source',
                     'vulnerability__namespace__name')
    ordering = ("id", 'version',)
    list_filter = ('vulnerability__namespace__name', 'vulnerability__severity_source')
    list_per_page = 20
    list_display_links = ("id", 'version', vulnerability_link, feature_link, namespace_link)
    actions = ["export_as_csv", "export_as_pdf"]
    search_form = VulnerabilityFixedinFeatureForm
